// Code generated by MockGen. DO NOT EDIT.
// Source: repository/wallet_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "wallet-service/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIWalletRepository is a mock of IWalletRepository interface.
type MockIWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletRepositoryMockRecorder
}

// MockIWalletRepositoryMockRecorder is the mock recorder for MockIWalletRepository.
type MockIWalletRepositoryMockRecorder struct {
	mock *MockIWalletRepository
}

// NewMockIWalletRepository creates a new mock instance.
func NewMockIWalletRepository(ctrl *gomock.Controller) *MockIWalletRepository {
	mock := &MockIWalletRepository{ctrl: ctrl}
	mock.recorder = &MockIWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletRepository) EXPECT() *MockIWalletRepositoryMockRecorder {
	return m.recorder
}

// ChangeBalance mocks base method.
func (m *MockIWalletRepository) ChangeBalance(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeBalance", arg0, arg1)
}

// ChangeBalance indicates an expected call of ChangeBalance.
func (mr *MockIWalletRepositoryMockRecorder) ChangeBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBalance", reflect.TypeOf((*MockIWalletRepository)(nil).ChangeBalance), arg0, arg1)
}

// CreateWallet mocks base method.
func (m *MockIWalletRepository) CreateWallet(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateWallet", arg0, arg1)
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockIWalletRepositoryMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockIWalletRepository)(nil).CreateWallet), arg0, arg1)
}

// Exists mocks base method.
func (m *MockIWalletRepository) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockIWalletRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIWalletRepository)(nil).Exists), arg0)
}

// GetAll mocks base method.
func (m *MockIWalletRepository) GetAll() *map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*map[string]int)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIWalletRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIWalletRepository)(nil).GetAll))
}

// GetBalance mocks base method.
func (m *MockIWalletRepository) GetBalance(arg0 string) model.ResponseModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(model.ResponseModel)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIWalletRepositoryMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIWalletRepository)(nil).GetBalance), arg0)
}
